{"version":3,"file":"ViaTrip.js","sourceRoot":"","sources":["ViaTrip.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wCAAmC;AAgDnC,MAAa,OAAO;IAMhB,YAAY,cAAyB,EAAE,mBAA8B,EAAE,UAAkB,EAAE,WAAmB;QAC1G,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,kBAAkB,GAAG,mBAAmB,CAAC;QAC9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAEM,cAAc,CAAC,gBAAwB,EAAE,QAAmB;QAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,yBAAyB,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,GAAG,IAAI,CAAC;QACxF,OAAO,WAAI,CAAC,GAAG,CAAwB,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC;aACxD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACzD,CAAC;IAGM,mBAAmB,CAAC,KAAY,EAAE,KAAY;QACjD,OAAO,WAAI,CAAC,GAAG,CAAyB,IAAI,CAAC,UAAU,GAAG,wBAAwB,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;aAC9G,IAAI,CAAC,GAAG,CAAC,EAAE;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAC/B,WAAI,CAAC,GAAG,CAAwB,IAAI,CAAC,UAAU,GAAG,uBAAuB,OAAO,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;iBACpG,IAAI,CAAC,GAAG,CAAC,EAAE;gBACR,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;QACtB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,oCAAoC,CAAC,IAAW;QACxD,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,2BAA2B,IAAI,CAAC,MAAM,EAAE,CAAC;QACvE,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5C,OAAO,WAAI,CAAC,GAAG,CAA4B,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC;aAC5D,IAAI,CAAC,GAAG,CAAC,EAAE;YACR,MAAM,SAAS,GAAgB,GAAG,CAAC,MAAM,CAAC;YAC1C,MAAM,KAAK,GAAY,EAAE,CAAC;YAC1B,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC;YACtB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;YACjD,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,SAAS,QAAQ,CAAC,OAAgB,EAAE,GAAW;gBAC3C,OAAO,CAAC,CAAC,CAAC,GAAG,IAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAE,CAAC,CAAC;gBAC1B,OAAO,GAAG,CAAC;YACf,CAAC;YACD,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;gBAC3C,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC9B,MAAM,gBAAgB,GAAG,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAC3F,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;gBACjF,MAAM,WAAW,GAAG,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;gBAClE,IAAI,gBAAgB,IAAI,CAAC,IAAI,gBAAgB,GAAG,EAAE,IAAI,WAAW,GAAG,gBAAgB,EAAE;oBAClF,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAC,CAAC,CAAC;iBACzC;gBACD,IAAI,OAAO,EAAE;oBACT,IAAI,gBAAgB,IAAI,EAAE,EAAE;wBACxB,MAAM;qBACT;iBACJ;qBAAM,IAAG,CAAC,OAAO,EAAE;oBAChB,IAAI,gBAAgB,GAAG,CAAC,EAAE;wBACtB,MAAM;qBACT;iBACJ;aACJ;YACD,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,mBAAmB,CAAC,IAAW;QACnC,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,2BAA2B,IAAI,CAAC,MAAM,EAAE,CAAC;QACvE,OAAO,WAAI,CAAC,GAAG,CAA4B,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC;aAC5D,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAEO,mCAAmC,CAAC,IAAW,EAAE,UAAiB,EAAE,eAAsB;QAC9F,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACnD,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YACpE,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;YACvE,OAAO,YAAY,GAAG,cAAc,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,8BAA8B,CAAC,IAAW,EAAE,IAAW;QAC3D,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CACnD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;IACzF,CAAC;IAEO,gCAAgC,CAAC,IAAW,EAAE,IAAW;QAC7D,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CACnD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEO,gBAAgB,CAAC,SAAsB,EAAE,IAAW;QACxD,OAAO,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;IACpF,CAAC;IAEY,sBAAsB,CAAC,KAAY,EAAE,KAAY,EAAE,IAAW;;YACvE,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;YAChG,MAAM,wBAAwB,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;YACtG,MAAM,kBAAkB,GAAG,IAAI,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,CAAC;YACvF,MAAM,oBAAoB,GAAG,IAAI,CAAC,8BAA8B,CAAC,wBAAwB,CAAC,CAAC;YAC3F,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,gCAAgC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpF,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAChF,MAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;YACrF,OAAO;gBACH,gBAAgB,EAAE,kBAAkB;gBACpC,gBAAgB,EAAE,oBAAoB;gBACtC,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,kBAAkB,GAAG,oBAAoB,GAAG,QAAQ;aAClE,CAAA;QACL,CAAC;KAAA;IAEO,eAAe,CAAC,IAAW;QAC/B,OAAO,EAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAC,CAAC;IAC3E,CAAC;IACO,8BAA8B,CAAC,QAAgB;QACnD,OAAO,QAAQ,GAAG,EAAE,CAAC;IACzB,CAAC;IAEO,gCAAgC,CAAC,OAAe,EAAE,WAAmB;QACzE,MAAM,WAAW,GAAG,GAAG,WAAW,CAAC,IAAI,EAAE,IAAI,WAAW,CAAC,KAAK,EAAE,GAAC,CAAC,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,OAAO,EAAE,CAAC;QACtG,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5D,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEO,wBAAwB,CAAC,KAAa,EAAE,KAAa;QACzD,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IACO,iBAAiB,CAAC,SAAoB,EAAE,SAAoB,EAAE,WAAoB,KAAK,EAAE,WAAmB,CAAC;QACjH,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,iCAAiC;QACzE,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,gBAAgB;QAC5D,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;QAC3C,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;QAChC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU;QAChD,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,CAAC;IACvD,CAAC;CACJ;AAxJD,0BAwJC","sourcesContent":["import {Rest} from \"../utils/rest\";\n\nexport interface ILocation {\n    lat: string;\n    lon: string;\n}\n\nexport interface IStop {\n    stopId: number;\n    latitude?: number\n    longitude?: number;\n    wheelchairBoarding?: boolean;\n    stopCode?: number;\n    stopDescription?: any;\n    stopName?: string\n}\n\nexport interface IStopTime {\n    id: number;\n    arrivalTime: string;\n    arrivalTimeIsNextDay: boolean;\n    departureTime: string;\n    departureTimeIsNextDay: boolean;\n    stopId: number;\n    stopSequence: number;\n    stopHeadsign: string;\n    pickupType: number;\n    dropoffType: number;\n    shapeDistTraveled: number;\n    tripId: number;\n}\n\nexport interface ITrip {\n    tripId: number;\n}\n\nexport interface IViaResponse<T> {\n    result: T;\n    statuscode: number;\n}\n\nexport interface ITripTimes {\n    stop1WalkingTime: number;\n    stop2WalkingTime: number;\n    rideTime: number;\n    totalTime: number;\n}\n\nexport class ViaTrip {\n    sourceLocation: ILocation;\n    desinationLocation: ILocation;\n    baseApiUrl: string;\n    accessToken: string;\n\n    constructor(sourceLocation: ILocation, destinationLocation: ILocation, baseApiUrl: string, accessToken: string) {\n        this.sourceLocation = sourceLocation;\n        this.desinationLocation = destinationLocation;\n        this.accessToken = accessToken;\n        this.baseApiUrl = baseApiUrl;\n    }\n\n    public findCloseStops(maxNumberOfStops: number, location: ILocation): Promise<IStop[]> {\n        const url = this.baseApiUrl + `/api/v1/stops/closest/${location.lat}/${location.lon}/3`;\n        return Rest.get<IViaResponse<IStop[]>>(url, this.accessToken)\n            .then(res => res.result.slice(maxNumberOfStops));\n    }\n\n\n    public areStopsOnSameRoute(stop1: IStop, stop2: IStop): Promise<boolean> {\n        return Rest.get<IViaResponse<number[]>>(this.baseApiUrl + `/api/v1/stops/routes/${stop1.stopId}`, this.accessToken)\n            .then(res => {\n                return res.result.filter(routeId =>\n                    Rest.get<IViaResponse<IStop[]>>(this.baseApiUrl + `/api/v1/stops/route/${routeId}`, this.accessToken)\n                    .then(res => {\n                        return res.result.find(stop => stop.stopId === stop2.stopId);\n                    })).length > 0\n            })\n            .catch(err => {\n                console.log(err);\n                return false;\n            });\n    }\n\n    private findSourceLocationTripsAtCurrentTime(stop: IStop): Promise<ITrip[]> {\n    const url = this.baseApiUrl + `/api/v1/stop-times/stop/${stop.stopId}`;\n    const stopLocation = this.getStopLocation(stop);\n        return Rest.get<IViaResponse<IStopTime[]>>(url, this.accessToken)\n            .then(res => {\n                const stopTimes: IStopTime[] = res.result;\n                const trips: ITrip[] = [];\n                const time = moment();\n                const forward = time.hour() <= 12;\n                const start = forward ? 0 : stopTimes.length - 1;\n                const end = forward ? stopTimes.length - 1 : 0;\n                function addOrSub(forward: boolean, val: number): number {\n                    forward ? val+=1 : val-=1;\n                    return val;\n                }\n                for (let i = start; end; addOrSub(forward, i)) {\n                    const stopTime = stopTimes[i];\n                    const minutesUntilStop = this.findMinutesBewtweenNowAndApiTime(stopTime.arrivalTime, time);\n                    const distance = this.calculateDistance(this.sourceLocation, stopLocation, true);\n                    const walkingTime = this.distanceInKmToWalkingTimeInMin(distance);\n                    if (minutesUntilStop >= 0 && minutesUntilStop < 45 && walkingTime < minutesUntilStop) {\n                        trips.push({tripId: stopTime.tripId});\n                    }\n                    if (forward) {\n                        if (minutesUntilStop >= 45) {\n                            break;\n                        }\n                    } else if(!forward) {\n                        if (minutesUntilStop < 0) {\n                            break;\n                        }\n                    }\n                }\n                return trips;\n            });\n    }\n\n    private findAllStopsForTrip(trip: ITrip): Promise<IStopTime[]> {\n        const url = this.baseApiUrl + `/api/v1/stop-times/trip/${trip.tripId}`;\n        return Rest.get<IViaResponse<IStopTime[]>>(url, this.accessToken)\n            .then(res => res.result);\n    }\n\n    private isDestinationStopAfterSourceForTrip(trip: ITrip, sourceStop: IStop, destinationStop: IStop): Promise<boolean> {\n        return this.findAllStopsForTrip(trip).then(stopTimes => {\n            const sourceSequence = this.findStopSequence(stopTimes, sourceStop);\n            const destSequence = this.findStopSequence(stopTimes, destinationStop);\n            return destSequence > sourceSequence;\n        });\n    }\n\n    private findStopArrivalTimeForTripStop(stop: IStop, trip: ITrip): Promise<Moment> {\n        return this.findAllStopsForTrip(trip).then(stopTimes =>\n            moment(stopTimes.find(stopTime => stopTime.tripId === stop.stopId).arrivalTime));\n    }\n\n    private findStopDepartureTimeForTripStop(stop: IStop, trip: ITrip): Promise<Moment> {\n        return this.findAllStopsForTrip(trip).then(stopTimes =>\n            moment(stopTimes.find(stopTime => stopTime.tripId === stop.stopId).departureTime));\n    }\n\n    private findStopSequence(stopTimes: IStopTime[], stop: IStop): number {\n        return stopTimes.find(stopTime => stopTime.tripId === stop.stopId).stopSequence;\n    }\n\n    public async calculateTotalTripTime(stop1: IStop, stop2: IStop, trip: ITrip): Promise<ITripTimes> {\n        const stop1Location = this.getStopLocation(stop1);\n        const stop2Location = this.getStopLocation(stop2);\n        const walkingDistanceToStop1 = this.calculateDistance(this.sourceLocation, stop1Location, true);\n        const walkingDistanceFromStop2 = this.calculateDistance(stop2Location, this.desinationLocation, true);\n        const walkingTimeToStop1 = this.distanceInKmToWalkingTimeInMin(walkingDistanceToStop1);\n        const walkingTimeFromStop2 = this.distanceInKmToWalkingTimeInMin(walkingDistanceFromStop2);\n        const stop1DepartureTime = await this.findStopDepartureTimeForTripStop(stop1, trip);\n        const stop2ArrivalTime = await this.findStopArrivalTimeForTripStop(stop2, trip);\n        const rideTime = this.findMinutesBewtweenTimes(stop1DepartureTime, stop2ArrivalTime);\n        return {\n            stop1WalkingTime: walkingTimeToStop1,\n            stop2WalkingTime: walkingTimeFromStop2,\n            rideTime: rideTime,\n            totalTime: walkingTimeToStop1 + walkingTimeFromStop2 + rideTime\n        }\n    }\n\n    private getStopLocation(stop: IStop): ILocation {\n        return {lat: stop.latitude.toString(), lon: stop.longitude.toString()};\n    }\n    private distanceInKmToWalkingTimeInMin(distance: number): number {\n        return distance * 20;\n    }\n\n    private findMinutesBewtweenNowAndApiTime(apiTime: string, currentDate: Moment): number {\n        const apiFullTime = `${currentDate.year()}-${currentDate.month()+1}-${currentDate.date()}T${apiTime}`;\n        const apiDate = moment(apiFullTime);\n        const duration = moment.duration(apiDate.diff(currentDate));\n        return duration.minutes();\n    }\n\n    private findMinutesBewtweenTimes(time1: Moment, time2: Moment): number {\n        const duration = moment.duration(time2.diff(time1));\n        return duration.minutes();\n    }\n    private calculateDistance(location1: ILocation, location2: ILocation, returnKm: boolean = false, decimals: number = 2): number {\n        const lat1 = parseFloat(location1.lat);\n        const lon1 = parseFloat(location1.lon);\n        const lat2 = parseFloat(location2.lat);\n        const lon2 = parseFloat(location2.lon);\n        const R = returnKm ? 6378.1 : 3958.756; // Radius of the earth in km | mi\n        const dLat = (lat2 - lat1) * Math.PI / 180; // deg2rad below\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        let phi1 = lat1 * Math.PI / 180;\n        let phi2 = lat2 * Math.PI / 180;\n        let x = dLon * Math.cos((phi1 + phi2) / 2);\n        let y = dLat;\n        let d = Math.sqrt(x * x + y * y) * R; // km | mi\n        let round = parseFloat(d.toString() + 'e' + decimals.toString());\n        return Number(Math.round(round) + 'e-' + decimals);\n    }\n}\n"]}