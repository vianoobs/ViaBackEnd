{"version":3,"file":"ViaTrip.js","sourceRoot":"","sources":["ViaTrip.ts"],"names":[],"mappings":"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","sourcesContent":["import {Rest} from \"../utils/rest\";\n\nexport interface ILocation {\n    lat: string;\n    lon: string;\n}\n\nexport interface IStop {\n    stopId: number;\n    latitude?: number\n    longitude?: number;\n    wheelchairBoarding?: boolean;\n    stopCode?: number;\n    stopDescription?: any;\n    stopName?: string\n}\n\nexport interface ITrip {\n    tripId: number;\n}\n\nexport interface IViaResponse<T> {\n    result: T;\n    statuscode: number;\n}\n\nexport class ViaTrip {\n    sourceLocation: ILocation;\n    desinationLocation: ILocation;\n    baseApiUrl: string;\n    accessToken: string;\n\n    constructor(sourceLocation: ILocation, destinationLocation: ILocation, baseApiUrl: string, accessToken: string) {\n        this.sourceLocation = sourceLocation;\n        this.desinationLocation = destinationLocation;\n        this.accessToken = accessToken;\n        this.baseApiUrl = baseApiUrl;\n    }\n\n    public findCloseStops(maxNumberOfStops: number, location: ILocation): Promise<IStop[]> {\n        const url = this.baseApiUrl + `/api/v1/stops/closest/${location.lat}/${location.lon}/3`;\n        return Rest.get<IViaResponse<IStop[]>>(url, this.accessToken)\n            .then(res =>\n                res.result.slice(maxNumberOfStops))\n            .catch(err =>\n                err);\n    }\n\n\n    public areStopsOnSameRoute(stop1: IStop, stop2: IStop): Promise<boolean> {\n        return Rest.get<IViaResponse<number[]>>(this.baseApiUrl + `/api/v1/stops/routes/${stop1.stopId}`, this.accessToken)\n            .then(res => {\n                return res.result.filter(routeId =>\n                    Rest.get<IViaResponse<IStop[]>>(this.baseApiUrl + `/api/v1/stops/route/${routeId}`, this.accessToken)\n                    .then(res => {\n                        return res.result.find(stop => stop.stopId === stop2.stopId);\n                    })\n                    .catch(err => err)).length > 0\n            })\n            .catch(err => err);\n    }\n    //\n    // private findSourceLocationTripsAtCurrentTime(stopId: number): Trip[] {\n    //\n    // }\n    //\n    // private findAllStopsForTrip(trip: Trip): IStop[] {\n    //\n    // }\n    //\n    // private isDestinationStopAfterSourceForTrip(trip: Trip): boolean {\n    //\n    // }\n    //\n    // private findStopTimeForTrip(stop: IStop, trip: Trip): number {\n    //\n    // }\n    //\n    // private distanceToTime(distance: number): number {\n    //\n    // }\n\n    private calculateDistance(location1: ILocation, location2: ILocation, returnKm: boolean = false, decimals: number = 2): number {\n        const lat1 = parseFloat(location1.lat);\n        const lon1 = parseFloat(location1.lon);\n        const lat2 = parseFloat(location2.lat);\n        const lon2 = parseFloat(location2.lon);\n        const R = returnKm ? 6378.1 : 3958.756; // Radius of the earth in km | mi\n        const dLat = (lat2 - lat1) * Math.PI / 180; // deg2rad below\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        let phi1 = lat1 * Math.PI / 180;\n        let phi2 = lat2 * Math.PI / 180;\n        let x = dLon * Math.cos((phi1 + phi2) / 2);\n        let y = dLat;\n        let d = Math.sqrt(x * x + y * y) * R; // km | mi\n        let round = parseFloat(d.toString() + 'e' + decimals.toString());\n        return Number(Math.round(round) + 'e-' + decimals);\n    }\n}\n"]}