{"version":3,"file":"apiRoutes.js","sourceRoot":"","sources":["apiRoutes.ts"],"names":[],"mappings":"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","sourcesContent":["import superagent from \"superagent\";\nimport express = require('express');\nimport { yelpApi, googleApi } from '../Config/config.js';\n\nlet accessToken;\n\n//helper functions\nconst paramReturn = reqParamObject => {\n    return {\n        term: reqParamObject[\"term\"] || null,\n        latitude: reqParamObject[\"lat\"] || \"29.424122\",\n        longitude: reqParamObject[\"long\"] || \"-98.493629\",\n        radius: \"160000\",\n        categories: reqParamObject[\"categories\"] || null,\n        price: reqParamObject[\"price\"] || \"1,2,3,4\"\n    }\n};\n\nconst apiRoutes = app => {\n\n    // ------- yelp ---------------\n    // ----------------------------\n    app.post('/api/yelp', (req: express.Request, res: express.Response) => {\n        superagent\n            .get(\"https://api.yelp.com/v3/businesses/search\")\n            .set(\"Authorization\", `bearer ${yelpApi}`)\n            .query(paramReturn(req.body))\n            .set(\"Authorization\", `bearer ${yelpApi}`)\n            .then(yelpRes => {\n                res.send(JSON.parse(yelpRes.text));\n            })\n            .catch(error => console.log(error));\n    });\n\n    // ------- via all routes ---------------\n    // ----------------------------\n    app.get(\"/api/all-routes/\", (req: express.Request, res: express.Response) => {\n        superagent\n            .get(\"https://codegtfsapi.viainfo.net/api/v1/routes\")\n            .set(\"Authorization\", `bearer ${accessToken}`)\n            .set(\"Accept\", \"application/json\")\n            .then(response => {\n                console.log(\"response: here\");\n                res.send(JSON.parse(response.text)[\"result\"]);\n            }).catch(err => {\n            console.log(\"error\");\n            res.send(err);\n            console.log(err)\n        });\n    });\n\n    // ------- google maps / directions ---------------\n    // ------------------------------------------------\n    app.post(\"/api/maps\", (req, res) => {\n        const currentLocation = `${req.body.currentLat},${req.body.currentLong}`;\n        superagent\n            .get(`https://maps.googleapis.com/maps/api/directions/json?origin=${currentLocation}&destination=${req.body.destination}&mode=transit&key=${googleApi}`)\n            .then(googleRes => {\n                const jsonResponse = JSON.parse(googleRes.text);\n                // if transit routes are found\n                if (jsonResponse[\"routes\"].length !== 0) {\n                    res.send(JSON.parse(googleRes.text)[\"routes\"][0][\"legs\"]);\n                } else {\n                    res.send(JSON.parse(googleRes.text))\n                }\n            });\n    });\n};\n\nexport default apiRoutes;"]}